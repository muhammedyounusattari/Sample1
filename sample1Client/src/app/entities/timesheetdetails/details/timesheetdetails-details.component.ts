import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormBuilder, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';

import { TimesheetdetailsService } from '../timesheetdetails.service';
import { ITimesheetdetails } from '../itimesheetdetails';
import { BaseDetailsComponent, Globals, PickerDialogService, ErrorService } from 'src/app/common/shared';
import { GlobalPermissionService } from 'src/app/core/global-permission.service';

import { TaskService } from 'src/app/entities/task/task.service';
import { TimeofftypeService } from 'src/app/entities/timeofftype/timeofftype.service';
import { TimesheetService } from 'src/app/entities/timesheet/timesheet.service';

@Component({
  selector: 'app-timesheetdetails-details',
  templateUrl: './timesheetdetails-details.component.html',
  styleUrls: ['./timesheetdetails-details.component.scss'],
})
export class TimesheetdetailsDetailsComponent extends BaseDetailsComponent<ITimesheetdetails> implements OnInit {
  title = 'Timesheetdetails';
  parentUrl = 'timesheetdetails';
  constructor(
    public formBuilder: FormBuilder,
    public router: Router,
    public route: ActivatedRoute,
    public dialog: MatDialog,
    public global: Globals,
    public timesheetdetailsService: TimesheetdetailsService,
    public pickerDialogService: PickerDialogService,
    public errorService: ErrorService,
    public taskService: TaskService,
    public timeofftypeService: TimeofftypeService,
    public timesheetService: TimesheetService,
    public globalPermissionService: GlobalPermissionService
  ) {
    super(formBuilder, router, route, dialog, global, pickerDialogService, timesheetdetailsService, errorService);
  }

  ngOnInit() {
    this.entityName = 'Timesheetdetails';
    this.setAssociations();
    super.ngOnInit();
    this.setForm();
    this.getItem();
  }

  setForm() {
    this.itemForm = this.formBuilder.group({
      hours: [''],
      id: [{ value: '', disabled: true }, Validators.required],
      notes: [''],
      workdate: ['', Validators.required],
      taskid: [''],
      taskDescriptiveField: [''],
      timeofftypeid: [''],
      timeofftypeDescriptiveField: [''],
      timesheetid: ['', Validators.required],
      timesheetDescriptiveField: ['', Validators.required],
    });

    this.fields = [
      {
        name: 'hours',
        label: 'hours',
        isRequired: false,
        isAutoGenerated: false,
        type: 'number',
      },

      {
        name: 'notes',
        label: 'notes',
        isRequired: false,
        isAutoGenerated: false,
        type: 'string',
      },

      {
        name: 'workdate',
        label: 'workdate',
        isRequired: true,
        isAutoGenerated: false,
        type: 'date',
      },
    ];
  }

  onItemFetched(item: ITimesheetdetails) {
    this.item = item;
    this.itemForm.patchValue(item);
    this.itemForm.get('workdate').setValue(item.workdate ? new Date(item.workdate) : null);
  }

  setAssociations() {
    this.associations = [
      {
        column: [
          {
            key: 'taskid',
            value: undefined,
            referencedkey: 'id',
          },
        ],
        isParent: false,
        table: 'task',
        type: 'ManyToOne',
        label: 'task',
        service: this.taskService,
        descriptiveField: 'taskDescriptiveField',
        referencedDescriptiveField: 'id',
      },
      {
        column: [
          {
            key: 'timeofftypeid',
            value: undefined,
            referencedkey: 'id',
          },
        ],
        isParent: false,
        table: 'timeofftype',
        type: 'ManyToOne',
        label: 'timeofftype',
        service: this.timeofftypeService,
        descriptiveField: 'timeofftypeDescriptiveField',
        referencedDescriptiveField: 'id',
      },
      {
        column: [
          {
            key: 'timesheetid',
            value: undefined,
            referencedkey: 'id',
          },
        ],
        isParent: false,
        table: 'timesheet',
        type: 'ManyToOne',
        label: 'timesheet',
        service: this.timesheetService,
        descriptiveField: 'timesheetDescriptiveField',
        referencedDescriptiveField: 'id',
      },
    ];

    this.childAssociations = this.associations.filter((association) => {
      return association.isParent;
    });

    this.parentAssociations = this.associations.filter((association) => {
      return !association.isParent;
    });
  }

  onSubmit() {
    let timesheetdetails = this.itemForm.getRawValue();
    super.onSubmit(timesheetdetails);
  }
}
